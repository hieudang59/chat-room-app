# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddUserIntoChatRoomInput {
  roomId: Float!
  userId: Float!
}

type AuthenticationResponse {
  accessToken: String!
  user: UserResponse!
}

input CreateChatRoomInput {
  name: String!
}

input CreatePostToChatRoomInput {
  content: String!
  roomId: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input GetPostByRoomIdInput {
  first: Int
  offset: Int
  roomId: Float!
}

input LeaveOutChatRoomInput {
  roomId: Float!
}

type LeaveOutChatRoomResponse {
  roomId: Float!
  userId: Float!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  addUserIntoChatRoom(AddUserIntoChatRoomInput: AddUserIntoChatRoomInput!): Participant!
  createChatRoom(CreateChatRoomInput: CreateChatRoomInput!): Room!
  createPost(CreatePostToChatRoomInput: CreatePostToChatRoomInput!): Post!
  leaveUserFromChatRoom(LeaveOutChatRoomInput: LeaveOutChatRoomInput!): LeaveOutChatRoomResponse!
  loginUser(LoginUserInput: LoginUserInput!): AuthenticationResponse!
  registerUser(RegisterUserInput: RegisterUserInput!): AuthenticationResponse!
  removePost(postId: Float!): Post!
}

type Participant {
  createdAt: DateTime!
  deletedAt: DateTime
  id: Float!
  roomId: Float!
  updatedAt: DateTime!
  userId: Float!
}

type Post {
  content: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Float!
  room: Room!
  roomId: Float!
  updatedAt: DateTime!
  user: User!
  userId: Float!
}

type Query {
  getPostsByRoomId(GetPostByRoomIdInput: GetPostByRoomIdInput!): [Post!]!
  getRoom(id: Float!): Room
  getRooms: [Room!]!
  getUser(email: String!): User
  getUsers: [User!]
}

input RegisterUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Room {
  createdAt: DateTime!
  deletedAt: DateTime
  id: Float!
  name: String!
  participants: [Participant!]!
  updatedAt: DateTime!
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  firstName: String!
  id: Float!
  lastName: String!
  participants: [Participant!]!
  updatedAt: DateTime!
}

type UserResponse {
  createdAt: DateTime!
  deletedAt: DateTime
  firstName: String!
  id: Float!
  lastName: String!
  updatedAt: DateTime!
}
